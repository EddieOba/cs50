/**
 * vigenere.c
 *
 * Edward Paulino
 * epaulino2@gmail.com
 *
 * Uses Vigenere cipher on user inputed text via a key submitted by argv[1].
 */

#include <cs50.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

int main(int argc, string argv[])
{
    // Rejects more than two arguments.
    while(argc != 2)
    {
        printf("Bad input hombre\n");
        return 1;
    }
    
    // Stores first argument as keyword to be used in cipher.
    string k = argv[1];
    
    // Rejects non alpha input from user.
    for (int i = 0, n = strlen(k); i < n; i++)
    {
        
        if (isalpha(k[i]))
        {
            
            k[i] = k[i];
        }
        else
        {
        
            printf("Invalid input\n");
            return 1;
        }
    } 
 
    // Makes keyword lowercase.
    for (int i = 0, n = strlen(k); i < n; i++)
    {
        
        if (isalpha(k[i]))
        {
            k[i] = tolower(k[i]);
        }
        else
        {
            k[i] = k[i];
        }
    }
    // Casts chars in keyword as type int.
    for (int i = 0, n = strlen(k); i < n; i++)
    {
        k[i] = (int) k[i];
    }
    // Starting variables we will modify during cipher.           
    string text = 0;
    int mod = 0;
    int index = 0;
    // Hardcodes constant for modulo operations.
    if (strlen(k) > 1)
    {
        
        mod = (strlen(k));
    }
    else
    {
        
        mod = 1;
    }
    // Gets text to be ciphered from user.
    text = GetString();
    // Vigenere's Cipher for both upper and lower case.
    for (int i = 0, n = strlen(text); i < n; i++)
    {
        
        if (isalpha(text[i]))
        {
    
            if (isupper(text[i]))
            {
            
                text[i] = text[i] - 65;
                text[i] = (text[i] + (k[index] - 97)) % 26;
                text[i] = text[i] + 65;
                index = (index + 1) % mod;
                
            }
            else if (islower(text[i]))
            {
            
                text[i] = text[i] - 97;
                text[i] = (text[i] + (k[index] - 97)) % 26;
                text[i] = text[i] + 97;
                index = (index + 1) % mod;       
            }
        } 
        else 
        {
            
            text[i] = text[i];
        } 
    }
    printf("%s\n", text);
}  
